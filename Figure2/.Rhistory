rawquantIP<-rawquantIP%>%filter(Protein != "RBM8A")
normvalues<-tibble()
for(i in unique(rawquantIP$Replicate)){
print(i)
for(j in unique(rawquantIP$Treatment)){
print(j)
for(k in unique(rawquantIP$Sample)){
filtereddf<-rawquantIP%>%filter(Replicate==i & Treatment==j & Sample == k)
ref_value <- filtereddf$Signal[1]
filtereddf<-filtereddf%>%mutate(
NormLevels = Signal/ref_value)
normvalues<-rbind(normvalues,filtereddf)}}}
normvalues$Treatment <- factor(normvalues$Treatment, levels = c("Control", "CHX"))
library(ggpubr)
a<-normvalues %>%
filter(Protein == "MAGOH"& Sample=="IP") %>%
mutate(NormLevels = 1 / NormLevels) %>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "t.test",
label = "p.format",
label.y = 18, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 3)+
labs(title = "IP : FLAG-PYM1", y = "Normalized Protein Levels") +
theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
a
rawquantIP<-rawquantIP%>%filter(Sample=="TotalExtract")
normvalues<-tibble()
for(i in unique(rawquantIP$Replicate)){
print(i)
for(j in unique(rawquantIP$Treatment)){
print(j)
filtereddf<-rawquantIP%>%filter(Replicate==i & Treatment==j)
ref_value <- filtereddf %>% filter(Protein == "TUBULIN") %>% pull(Signal)
filtereddf<-filtereddf%>%mutate(
NormLevels = Signal/ref_value)
normvalues<-rbind(normvalues,filtereddf)}}
normvalues$Treatment <- factor(normvalues$Treatment, levels = c("Control", "CHX"))
library(ggpubr)
b<-normvalues %>%
filter(Protein !="TUBULIN") %>%mutate(NormLevels=NormLevels*10)%>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "t.test", paired = TRUE,
label = "p.format",
label.y = 2.5, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 2,panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))+scale_y_log10()+
labs(title = "Total Extract", y = "Normalized Protein Levels")
b
a
compare_means(NormLevels ~ Treatment, data = normvalues, method = "wilcox.test")
rawquantIP<-read_csv("IPafterCHXQuant.csv")
rawquantIP<-rawquantIP%>%filter(Protein != "RBM8A")
normvalues<-tibble()
for(i in unique(rawquantIP$Replicate)){
print(i)
for(j in unique(rawquantIP$Treatment)){
print(j)
for(k in unique(rawquantIP$Sample)){
filtereddf<-rawquantIP%>%filter(Replicate==i & Treatment==j & Sample == k)
ref_value <- filtereddf$Signal[1]
filtereddf<-filtereddf%>%mutate(
NormLevels = Signal/ref_value)
normvalues<-rbind(normvalues,filtereddf)}}}
normvalues$Treatment <- factor(normvalues$Treatment, levels = c("Control", "CHX"))
library(ggpubr)
normvalues<-normvalues %>% mutate(NormLevels = 1 / NormLevels)
a<-normvalues %>%
filter(Protein == "MAGOH"& Sample=="IP") %>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "t.test",
label = "p.format",
label.y = 18, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 3)+
labs(title = "IP : FLAG-PYM1", y = "Normalized Protein Levels") +
theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
a
compare_means(NormLevels ~ Treatment, data = normvalues, method = "wilcox.test")
compare_means(NormLevels ~ Treatment, data = normvalues, method = "t.test")
a<-normvalues %>%
filter(Protein == "MAGOH"& Sample=="IP") %>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "t.test",
label = "p.format",
label.y = 18, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 3)+
labs(title = "IP : FLAG-PYM1", y = "Normalized Protein Levels") +
theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
a
View(normvalues)
compare_means(NormLevels ~ Treatment, data = normvalues, method = "t.test")
compare_means(NormLevels ~ Treatment, data = normvalues, method = "wilcox.test")
a<-normvalues %>%
filter(Protein == "MAGOH"& Sample=="IP") %>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "wilcox.test",
label = "p.format",
label.y = 18, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 3)+
labs(title = "IP : FLAG-PYM1", y = "Normalized Protein Levels") +
theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
a
compare_means(NormLevels ~ Treatment, data = normvalues, method = "wilcox.test")
normvalues<-normvalues %>% mutate(NormLevels = 1 / NormLevels)%>%
filter(Protein == "MAGOH"& Sample=="IP")
rawquantIP<-read_csv("IPafterCHXQuant.csv")
rawquantIP<-rawquantIP%>%filter(Protein != "RBM8A")
normvalues<-tibble()
for(i in unique(rawquantIP$Replicate)){
print(i)
for(j in unique(rawquantIP$Treatment)){
print(j)
for(k in unique(rawquantIP$Sample)){
filtereddf<-rawquantIP%>%filter(Replicate==i & Treatment==j & Sample == k)
ref_value <- filtereddf$Signal[1]
filtereddf<-filtereddf%>%mutate(
NormLevels = Signal/ref_value)
normvalues<-rbind(normvalues,filtereddf)}}}
normvalues$Treatment <- factor(normvalues$Treatment, levels = c("Control", "CHX"))
library(ggpubr)
normvalues<-normvalues %>% mutate(NormLevels = 1 / NormLevels)%>%
filter(Protein == "MAGOH"& Sample=="IP")
rawquantIP<-read_csv("IPafterCHXQuant.csv")
rawquantIP<-rawquantIP%>%filter(Protein != "RBM8A")
normvalues<-tibble()
for(i in unique(rawquantIP$Replicate)){
print(i)
for(j in unique(rawquantIP$Treatment)){
print(j)
for(k in unique(rawquantIP$Sample)){
filtereddf<-rawquantIP%>%filter(Replicate==i & Treatment==j & Sample == k)
ref_value <- filtereddf$Signal[1]
filtereddf<-filtereddf%>%mutate(
NormLevels = Signal/ref_value)
normvalues<-rbind(normvalues,filtereddf)}}}
normvalues$Treatment <- factor(normvalues$Treatment, levels = c("Control", "CHX"))
library(ggpubr)
normvalues<-normvalues %>% mutate(NormLevels = 1 / NormLevels)%>%
filter(Protein == "MAGOH"& Sample=="IP")
a<-normvalues %>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "wilcox.test",
label = "p.format",
label.y = 18, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 3)+
labs(title = "IP : FLAG-PYM1", y = "Normalized Protein Levels") +
theme(panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))
a
compare_means(NormLevels ~ Treatment, data = normvalues, method = "wilcox.test")
wilcox.test(NormLevels ~ Treatment, data = normvalues)
compare_means(NormLevels ~ Treatment, data = normvalues, method = "wilcox.test")
rawquantIP<-read_csv("IPafterCHXQuant.csv")
rawquantIP<-rawquantIP%>%filter(Protein != "RBM8A")
rawquantIP<-rawquantIP%>%filter(Sample=="TotalExtract")
normvalues<-tibble()
for(i in unique(rawquantIP$Replicate)){
print(i)
for(j in unique(rawquantIP$Treatment)){
print(j)
filtereddf<-rawquantIP%>%filter(Replicate==i & Treatment==j)
ref_value <- filtereddf %>% filter(Protein == "TUBULIN") %>% pull(Signal)
filtereddf<-filtereddf%>%mutate(
NormLevels = Signal/ref_value)
normvalues<-rbind(normvalues,filtereddf)}}
normvalues$Treatment <- factor(normvalues$Treatment, levels = c("Control", "CHX"))
b<-normvalues %>%
filter(Protein !="TUBULIN") %>%mutate(NormLevels=NormLevels*10)%>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "t.test", paired = TRUE,
label = "p.format",
label.y = 2.5, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 2,panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))+scale_y_log10()+
labs(title = "Total Extract", y = "Normalized Protein Levels")
b
compare_means(NormLevels ~ Treatment, data = normvalues, method = "wilcox.test")
compare_means(NormLevels ~ Protein, group.by = Treatment, data = normvalues, method = "wilcox.test")
View(normvalues)
compare_means(NormLevels ~ Treatment, group.by = Protein, data = normvalues, method = "wilcox.test")
compare_means(NormLevels ~ Treatment, group.by = "Protein", data = normvalues, method = "wilcox.test")
wilcox.test(NormLevels ~ Treatment,subset = "Protein", data = normvalues)
wilcox.test(NormLevels ~ Treatment,, data = normvalues)
wilcox.test(NormLevels ~ Treatment, data = normvalues)
compare_means(NormLevels ~ Treatment, group.by = "Protein", data = normvalues, method = "wilcox.test")
wilcox.test(NormLevels ~ Treatment, data = normvalues,subset = Protein %in% c("MAGOH", "PYM1"))
wilcox.test(NormLevels ~ Treatment, data = normvalues,subset = Protein %in% c("MAGOH"))
wilcox.test(NormLevels ~ Treatment, data = normvalues,subset = Protein %in% c("PYM1"))
wilcox.test(NormLevels ~ Treatment, data = normvalues,subset = Protein %in% c("MAGOH"))
b<-normvalues %>%
filter(Protein !="TUBULIN") %>%mutate(NormLevels=NormLevels*10)%>%
ggplot(aes(Protein, NormLevels, fill = Treatment)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.6), width = 0.6) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.6)) +
geom_point(aes(colour = Replicate, group = Treatment),
shape = 1,
position = position_dodge(width = 0.6)) +
stat_compare_means(
aes(group = Treatment),
method = "wilcox.test", paired = TRUE,
label = "p.format",
label.y = 2.5, size = 3,tip.length = 0.005
) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Dark2") +
theme_linedraw() +theme(aspect.ratio = 2,panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))+scale_y_log10()+
labs(title = "Total Extract", y = "Normalized Protein Levels")
b
compare_means(NormLevels ~ Treatment, group.by = "Protein", data = normvalues, method = "wilcox.test")
wilcox.test(NormLevels ~ Treatment, data = normvalues,subset = Protein %in% c("MAGOH"))
wilcox.test(NormLevels ~ Treatment, data = normvalues,subset = Protein %in% c("PYM1"))
setwd("~/OneDrive - The Ohio State University/Singhlab/Bioinfo/PYMpaperFiguresUpdate/Figure2/")
library(tidyverse)
CHXvsE117R<-read_csv("../DESeq2 for PYM samples/all_mutant_res.csv")
CHXvsE117R<-na.omit(CHXvsE117R)
names(CHXvsE117R)[1]<-"V1"
CHXvsE117R<-CHXvsE117R%>%mutate(log2FoldChange=-1*log2FoldChange)
CHXvsWT<-read_csv("../DESeq2 for PYM samples/all_WT_res.csv")
CHXvsWT<-na.omit(CHXvsWT)
names(CHXvsWT)[1]<-"V1"
CHXvsWT<-CHXvsWT%>%mutate(log2FoldChange=-1*log2FoldChange)
FoldchangeComp<-inner_join(CHXvsWT,CHXvsE117R, by = "V1")
library(ggpmisc)
library(ggpubr)
library(ggpointdensity)
reg<-lm(formula = log2FoldChange.y ~ log2FoldChange.x,
data=FoldchangeComp)
#get intercept and slope value
coeff<-coefficients(reg)
intercept<-coeff[1]
slope<- coeff[2]
a<-FoldchangeComp%>%filter(baseMean.x>100)%>%
ggplot(aes(log2FoldChange.x,log2FoldChange.y))+
geom_pointdensity(shape = 1, alpha = 0.8)+
scale_colour_gradient(low = "grey70", high = "black", na.value = NA)+
theme_linedraw()+
theme(axis.text = element_text(size = 5),axis.title = element_text(size = 7),
aspect.ratio = 1,panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))+
coord_cartesian(xlim = c(-5,5), ylim = c(-3.5,3.5))+
labs(#title = "Comparison of foldchanges upon CHX treatment", subtitle = "WT vs E117R", caption = "baseMean > 100",
x = "log2FC WT , +/- CHX",  y = "log2FC E117R , +/- CHX")+
stat_cor(aes(label = after_stat(rr.label)),label.x = -4.5, label.y = 3.2)+
geom_abline(intercept = intercept, slope = slope, color = "grey", linewidth = 0.4, linetype="dashed")+
theme(legend.position = "none")
a
FoldchangeComp%>%filter(log2FoldChange.x>2.5 & log2FoldChange.y < -1)%>%dplyr::select(V1)
E117RvsWT<-read_csv("../DESeq2 for PYM samples/all_NT_res.csv")
names(E117RvsWT)[1]<-"V1"
E117RvsWT<-na.omit(E117RvsWT)
CombinedScatterdf<-inner_join(CHXvsWT,E117RvsWT, by = "V1")
reg<-lm(formula = log2FoldChange.y ~ log2FoldChange.x,
data=CombinedScatterdf)
#get intercept and slope value
coeff<-coefficients(reg)
intercept<-coeff[1]
slope<- coeff[2]
b<-CombinedScatterdf%>%ggplot(aes(log2FoldChange.x,log2FoldChange.y))+
geom_pointdensity(shape = 1, alpha = 0.8)+
scale_colour_gradient(low = "grey70", high = "black", na.value = NA)+
theme_linedraw()+
theme(axis.text = element_text(size = 5),axis.title = element_text(size = 7),
aspect.ratio = 1,panel.grid.major = element_line(linetype = "blank"),
panel.grid.minor = element_line(linetype = "blank"))+
coord_cartesian(xlim = c(-5,5), ylim = c(-5,5))+
labs(#title = "Comparison of foldchanges", subtitle = "CHX vs MAGOHE117R",
x = "log2FC CHX vs WT",  y = "log2FC E117R vs WT")+
stat_cor(aes(label = after_stat(rr.label)),label.x = -4.5, label.y = 4.8)+
geom_abline(intercept = intercept, slope = slope, color = "grey", linewidth = 0.4, linetype="dashed")+
theme(legend.position = "none")
b
library(biomaRt)
listMarts(host='https://apr2020.archive.ensembl.org')
ensembl100=useMart(host='https://apr2020.archive.ensembl.org', biomart='ENSEMBL_MART_ENSEMBL', dataset='hsapiens_gene_ensembl')
attributes <- listAttributes(ensembl100)
filters <- listFilters(ensembl100)
lncRNA<- getBM(attributes = c("ensembl_gene_id","gene_biotype"),
mart = ensembl100,
useCache = FALSE)
table(lncRNA$gene_biotype)
lncRNA<-lncRNA%>%filter(gene_biotype=="lncRNA")
##plotting cdfs for RP mRNAs and lncRNAs
names(E117RvsWT)[1]<-"ensembl_gene_id"
E117RvsWT<-E117RvsWT%>%mutate(Type = case_when(ensembl_gene_id %in% lncRNA$ensembl_gene_id ~ "lncRNA",
TRUE ~ "Protein_coding"))
##PLotting lncRNA #####
# Perform the Wilcoxon rank-sum test for 'Type' column
wilcox_test <- wilcox.test(log2FoldChange ~ Type, data = E117RvsWT,
exact = FALSE, alternative = "less")
# Extract p-value and gene counts based on 'Type'
p_value <- formatC(wilcox_test$p.value, format = "e", digits = 2)  # Format p-value in scientific notation
count_type1 <- sum(E117RvsWT$Type == unique(E117RvsWT$Type)[1])
count_type2 <- sum(E117RvsWT$Type == unique(E117RvsWT$Type)[2])
# Modify legend text to include gene counts
legend_labels <- c(
paste0(unique(E117RvsWT$Type)[1], "\n(n=", count_type1, ")"),
paste0(unique(E117RvsWT$Type)[2], "\n(n=", count_type2, ")"))
# Ensure that 'Type' levels are in the intended order
E117RvsWT$Type <- factor(E117RvsWT$Type, levels = unique(E117RvsWT$Type))
# Plot with p-value annotation and modified legend text based on 'Type'
c<-E117RvsWT %>%
ggplot(aes(log2FoldChange, color = Type)) +
stat_ecdf(geom = "line", linewidth = 0.5) +
coord_cartesian(xlim = c(-2, 2)) +
scale_color_manual(values = c("grey40","firebrick"), labels = legend_labels) +  # Update legend labels
theme_linedraw() +
geom_vline(aes(xintercept = 0), linewidth = 0.02) +
geom_hline(aes(yintercept = 0.5), linewidth = 0.02) +
theme(axis.text = element_text(size = 5),axis.title = element_text(size = 7),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1,
legend.position = c(0.99, 0.01),
legend.justification = c(1, 0),
legend.title=element_text(size=6),
legend.text=element_text(size=4),
legend.key=element_blank(),
legend.box.background = element_blank(),
legend.background = element_blank(),
legend.key.size =unit(2, 'mm')) +
labs(#title = "E117R vs WT foldchanges - lncRNAs vs others",
y = "Cumulative frequency",
x = "log2FC E117R/WT",
color = "Type" ) +  # Label for the legend
annotate("text",x = -1.6, y = 0.95,label = paste("p =", p_value),hjust = 0,size = 2)
c
#####
###Reading NucCytoRanks
NucCyto<-read_tsv("nuclear fractions and percentiles.txt")
names(NucCyto)[1]<-"ensembl_gene_id"
lncRNA_NucCyto<-inner_join(lncRNA,NucCyto)
glimpse(lncRNA_NucCyto)
lncRNA_NucCyto$Fraction<-as.numeric(lncRNA_NucCyto$`Nuclear Fraction`)
summary(lncRNA_NucCyto$Fraction)
lncRNA_NucCyto<-lncRNA_NucCyto%>%mutate(NuclearlncRNA = case_when(Fraction > 0.9580 ~ "Yes",
TRUE ~ "No"))
table(lncRNA_NucCyto$NuclearlncRNA)
names(lncRNA_NucCyto)
names(E117RvsWT)[1]<-"ensembl_gene_id"
lncRNA_NucCyto_E117R<-inner_join(lncRNA_NucCyto,E117RvsWT)
table(lncRNA_NucCyto_E117R$NuclearlncRNA)
# Perform the Wilcoxon rank-sum test for 'Type' column
wilcox_test <- wilcox.test(log2FoldChange ~ NuclearlncRNA, data = lncRNA_NucCyto_E117R,
exact = FALSE, alternative = "less")
# Extract p-value and gene counts based on 'Type'
p_value <- formatC(wilcox_test$p.value, format = "e", digits = 2)  # Format p-value in scientific notation
count_type1 <- sum(lncRNA_NucCyto_E117R$NuclearlncRNA == unique(lncRNA_NucCyto_E117R$NuclearlncRNA)[1])
count_type2 <- sum(lncRNA_NucCyto_E117R$NuclearlncRNA == unique(lncRNA_NucCyto_E117R$NuclearlncRNA)[2])
# Modify legend text to include gene counts
legend_labels <- c(
paste0(unique(lncRNA_NucCyto_E117R$NuclearlncRNA)[1], " (n=", count_type1, ")"),
paste0(unique(lncRNA_NucCyto_E117R$NuclearlncRNA)[2], " (n=", count_type2, ")"))
# Ensure that 'Type' levels are in the intended order
lncRNA_NucCyto_E117R$NuclearlncRNA <- factor(lncRNA_NucCyto_E117R$NuclearlncRNA, levels = unique(lncRNA_NucCyto_E117R$NuclearlncRNA))
d<-lncRNA_NucCyto_E117R%>%
ggplot(aes(log2FoldChange, color = NuclearlncRNA))+
stat_ecdf(geom = "line", linewidth = 0.5)+
coord_cartesian(xlim = c(-2,2))+
scale_color_manual(values=c("red", "red4"), labels = legend_labels) +
theme_linedraw()+
geom_vline(aes(xintercept = 0), linewidth = 0.02)+
geom_hline(aes(yintercept = 0.5), linewidth = 0.02)+
theme(axis.text = element_text(size = 5),axis.title = element_text(size = 7),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1,
legend.position = c(0.99, 0.01),
legend.justification = c(1, 0),
legend.title=element_text(size=6),
legend.text=element_text(size=4),
legend.key=element_blank(),
legend.box.background = element_blank(),
legend.background = element_blank(),
legend.key.size =unit(2, 'mm'))+
annotate("text",x = -1.6, y = 0.95,label = paste("p =", p_value),hjust = 0,size = 2)+
labs(#title = "E117R vs WT foldchanges - lncRNA by nuclear fraction",
y = "Cumulative frequency", x = "log2FC E117R/WT")
d
library(patchwork)
(b+a)/(c+d)
compare_means(log2FoldChange ~ Type, data = E117RvsWT, method = "wilcox.test")
c
##PLotting lncRNA #####
# Perform the Wilcoxon rank-sum test for 'Type' column
wilcox_test <- wilcox.test(log2FoldChange ~ Type, data = E117RvsWT,
exact = FALSE, alternative = "less")
wilcox_test
# Extract p-value and gene counts based on 'Type'
p_value <- formatC(wilcox_test$p.value, format = "e", digits = 2)  # Format p-value in scientific notation
p_value
# Modify legend text to include gene counts
legend_labels <- c(
paste0(unique(E117RvsWT$Type)[1], "\n(n=", count_type1, ")"),
paste0(unique(E117RvsWT$Type)[2], "\n(n=", count_type2, ")"))
# Ensure that 'Type' levels are in the intended order
E117RvsWT$Type <- factor(E117RvsWT$Type, levels = unique(E117RvsWT$Type))
# Plot with p-value annotation and modified legend text based on 'Type'
c<-E117RvsWT %>%
ggplot(aes(log2FoldChange, color = Type)) +
stat_ecdf(geom = "line", linewidth = 0.5) +
coord_cartesian(xlim = c(-2, 2)) +
scale_color_manual(values = c("grey40","firebrick"), labels = legend_labels) +  # Update legend labels
theme_linedraw() +
geom_vline(aes(xintercept = 0), linewidth = 0.02) +
geom_hline(aes(yintercept = 0.5), linewidth = 0.02) +
theme(axis.text = element_text(size = 5),axis.title = element_text(size = 7),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1,
legend.position = c(0.99, 0.01),
legend.justification = c(1, 0),
legend.title=element_text(size=6),
legend.text=element_text(size=4),
legend.key=element_blank(),
legend.box.background = element_blank(),
legend.background = element_blank(),
legend.key.size =unit(2, 'mm')) +
labs(#title = "E117R vs WT foldchanges - lncRNAs vs others",
y = "Cumulative frequency",
x = "log2FC E117R/WT",
color = "Type" ) +  # Label for the legend
annotate("text",x = -1.6, y = 0.95,label = paste("p =", p_value),hjust = 0,size = 2)
c
compare_means(log2FoldChange ~ Type, data = E117RvsWT, method = "wilcox.test")
wilcox_test
compare_means(log2FoldChange ~ Type, data = E117RvsWT, method = "wilcox.test")
# Perform the Wilcoxon rank-sum test for 'Type' column
wilcox_test <- wilcox.test(log2FoldChange ~ NuclearlncRNA, data = lncRNA_NucCyto_E117R,
exact = FALSE, alternative = "less")
wilcox_test
compare_means(log2FoldChange ~ NuclearlncRNA, data = lncRNA_NucCyto_E117R, method = "wilcox.test")
# Perform the Wilcoxon rank-sum test for 'Type' column
wilcox_test <- wilcox.test(log2FoldChange ~ NuclearlncRNA, data = lncRNA_NucCyto_E117R,
exact = FALSE, alternative = "less")
# Extract p-value and gene counts based on 'Type'
p_value <- formatC(wilcox_test$p.value, format = "e", digits = 2)  # Format p-value in scientific notation
wilcox_test
compare_means(log2FoldChange ~ NuclearlncRNA, data = lncRNA_NucCyto_E117R, method = "wilcox.test")
